Search ? for pending tasks
Arrays.toString(sortedNumbers)
Arrays.sort(candidates);
Collections.reverse(Arrays.asList(candidates)); // doesnt work, check it first

https://leetcode.com/problems/removing-stars-from-a-string/?envType=study-plan-v2&envId=leetcode-75
class Solution {
    public String removeStars(String s) {
         int index = 0;
        int len = s.length();
        byte[] bytes = new byte[len];
        s.getBytes(0, len, bytes, 0);
        for(byte ch : bytes) {
            if(ch == '*')
            {
                index--;
            }else {
                bytes[index++] = ch;
            }
        }
        return new String(bytes, 0, index);
    }
}

In Java, exception handling is done using `try`, `catch`, `finally`, and `throw`. This mechanism allows you to handle runtime errors and maintain the normal flow of your application.

### Basic Syntax

```java
try {
    // Code that might throw an exception
} catch (ExceptionType1 e1) {
    // Code to handle ExceptionType1
} catch (ExceptionType2 e2) {
    // Code to handle ExceptionType2
} finally {
    // Code that will always execute, regardless of whether an exception was thrown
}
```

### Example Code

Here is an example demonstrating the use of `try`, `catch`, `finally`, and `throw`:

```java
public class ExceptionHandlingExample {
    public static void main(String[] args) {
        try {
            int result = divide(10, 0);  // This will cause an ArithmeticException
            System.out.println("Result: " + result);
        } catch (ArithmeticException e) {
            System.out.println("Caught an ArithmeticException: " + e.getMessage());
        } catch (Exception e) {
            System.out.println("Caught a generic exception: " + e.getMessage());
        } finally {
            System.out.println("This block is always executed");
        }

        try {
            validateAge(15);  // This will cause an IllegalArgumentException
        } catch (IllegalArgumentException e) {
            System.out.println("Caught an IllegalArgumentException: " + e.getMessage());
        }

        System.out.println("Program continues after try-catch blocks");
    }

    public static int divide(int a, int b) {
        return a / b;  // This can throw an ArithmeticException if b is 0
    }

    public static void validateAge(int age) {
        if (age < 18) {
            throw new IllegalArgumentException("Age must be at least 18");
        }
    }
}
```

### Explanation

1. **`try` Block**:
   - Contains code that might throw an exception. If an exception occurs, the rest of the `try` block is skipped, and control moves to the corresponding `catch` block.

2. **`catch` Block**:
   - Catches specific exceptions thrown by the `try` block. You can have multiple `catch` blocks to handle different types of exceptions.

3. **`finally` Block**:
   - Contains code that is always executed, whether an exception was thrown or not. It's typically used for cleanup activities, such as closing files or releasing resources.

4. **`throw` Statement**:
   - Used to explicitly throw an exception. In the `validateAge` method, an `IllegalArgumentException` is thrown if the age is less than 18.

### Custom Exception Handling

You can also define your own custom exceptions by extending the `Exception` class:

```java
class CustomException extends Exception {
    public CustomException(String message) {
        super(message);
    }
}

public class CustomExceptionExample {
    public static void main(String[] args) {
        try {
            testMethod(5);
        } catch (CustomException e) {
            System.out.println("Caught a CustomException: " + e.getMessage());
        }
    }

    public static void testMethod(int value) throws CustomException {
        if (value < 10) {
            throw new CustomException("Value must be at least 10");
        }
    }
}
```

### Explanation of Custom Exception

1. **Custom Exception Class**:
   - A custom exception class `CustomException` is created by extending `Exception`.

2. **Using Custom Exception**:
   - The `testMethod` method throws a `CustomException` if the value is less than 10. This is then caught in the `main` method.

### Summary

- **`try`**: Block where exceptions can occur.
- **`catch`**: Block that handles the exception.
- **`finally`**: Block that executes regardless of whether an exception was thrown.
- **`throw`**: Statement to explicitly throw an exception.
- **Custom Exception**: Define your own exceptions by extending the `Exception` class.

This structure helps manage exceptions effectively and keeps your code robust and error-tolerant.

When there are numerous function are waiting in call stack, segmentaion fault occurs aka stackoverflow.
When we return the function gets terminated.


Collections.sort(list, new Comparator<Map.Entry<String, Integer>>() {
    public int compare(Map.Entry<String, Integer> o1, Map.Entry<String, Integer> o2) {
        return o1.getKey().compareTo(o2.getKey());
    }
}); // ninja
        
// @Override ???
stack.add(new HashMap<>(currMap)); // ninja
List<Map.Entry<String, Integer>> list = new ArrayList<>(currMap.entrySet());
list.sort(Map.Entry.comparingByKey()); // ninja

// Convert the sorted list back to a LinkedHashMap to maintain the sorted order.
LinkedHashMap<String, Integer> sortedMap = new LinkedHashMap<>();
for (Map.Entry<String, Integer> entry : list) {
    sortedMap.put(entry.getKey(), entry.getValue());
}


Memoization and tabulation are both techniques used to optimize algorithms by storing intermediate results to avoid redundant calculations, especially in dynamic programming problems. Hereâ€™s a brief explanation of each:

### Memoization
- **Definition:** Memoization is a top-down approach where you store the results of expensive function calls and reuse these results when the same inputs occur again.
- **How it Works:** When a function is called with certain arguments, it first checks if the result is already in a cache (often implemented as a dictionary or hash table). If it is, the function returns the cached result. If not, it computes the result, stores it in the cache, and then returns it.
- **Use Case:** Memoization is particularly useful when a recursive algorithm solves overlapping subproblems, which means it recalculates the same results multiple times.

**Example:** In calculating Fibonacci numbers, memoization would store previously computed Fibonacci values so that each value is only calculated once.

### Tabulation
- **Definition:** Tabulation is a bottom-up approach where you solve all possible subproblems starting from the smallest one and build up to the final solution.
- **How it Works:** You create a table (usually a 2D array or list) where each entry represents a subproblem solution. You iteratively fill in the table based on previously computed values, ensuring that when you need a solution for a particular subproblem, it's already available in the table.
- **Use Case:** Tabulation is useful when you can solve the problem iteratively and when you can build up the solution in a systematic way.

**Example:** In calculating Fibonacci numbers, tabulation would involve filling an array where each index represents a Fibonacci number, starting from the base cases and working up to the desired value.

### Comparison
- **Memoization:** Generally easier to implement if you already have a recursive solution. Can be more memory-efficient since it only stores the results that are needed.
- **Tabulation:** Often more space-efficient and can avoid the overhead of recursive function calls. Typically results in iterative solutions, which can be more performant in terms of execution speed.

Both techniques are used to improve the efficiency of algorithms by reducing redundant computations, with memoization using a top-down approach and tabulation using a bottom-up approach.


A subsequesnce is in same order but not contiguous.

int sum = Arrays.stream(nums).sum();
Collections.max(map.values())

modules classes

// offer: if the queue is full, return false and will not throw an exception
// add: if the queue is full, throw an exception

PriorityQueue<int[]> maxHeap = new PriorityQueue<>();
PriorityQueue<Pair<Integer, Integer>> maxHeap = new PriorityQueue<>();
PriorityQueue<int[]> maxHeap = new PriorityQueue<>(
        (a, b) -> Integer.compare((a[0] * a[0] + a[1] * a[1]), (b[0] * b[0] + b[1] *
                b[1])));
PriorityQueue<int[]> maxHeap = new PriorityQueue<>(
        Collections.reverseOrder((a, b) -> Integer.compare((a[0] * a[0] + a[1] *
                a[1]), (b[0] * b[0] + b[1] * b[1]))));

int pivotIndex = new Random().nextInt(r - l + 1) + l;

            String array = Arrays.toString(temp);
            map.putIfAbsent(str, new ArrayList<>());
